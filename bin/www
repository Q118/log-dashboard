
/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("log-dashboard:server");
const http = require("http");
const WebSocket = require("ws");
const fs = require("fs");

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

// listener for the websocket connection event 
wss.on("connection", (ws) => {
    //listener for the websocket message event
    ws.on("message",  (filePath) => {
        fs.watch(filePath, () => {
            // wrap with watch to watch for changes on the log file
            fs.createReadStream(filePath).on("data",  (chunk) => {
                // convert the chunk buffer to string
                let logsArr = chunk.toString().split("\n");
                let logStr = logsArr.reverse().join("\n");
                // ^reverse the array, convert to string and join with new line
                ws.send(logStr);
                // ^send the formatted logs back to the client
            });
        });



    });
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    const bind = typeof port === "string"
        ? "Pipe " + port
        : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === "string"
        ? "pipe " + addr
        : "port " + addr.port;
    debug("Listening on " + bind);
}
